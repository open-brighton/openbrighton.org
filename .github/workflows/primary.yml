name: Primary

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: npm ci

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
  lint:
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs:
      - install
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Upload static site artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "STACK_NAME=openbrighton-main-web" >> $GITHUB_ENV
          echo "TEMPLATE=./infra/template.yml" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate
        run: |
          aws cloudformation validate-template \
            --template-body file://$TEMPLATE \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy Infrastructure
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE \
            --no-fail-on-empty-changeset \
            --region ${{ secrets.AWS_REGION }}

      - name: Download build artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist

      - name: Upload build to S3
        if: github.ref == 'refs/heads/main'
        run: |
          # install jq
          sudo apt-get update
          sudo apt-get install jq

          # get required ssm parameters
          DISTRIBUTION_ID=$(aws ssm get-parameter --name /openbrighton/main/web/distribution/id | jq -r '.Parameter.Value')
          SOURCE_BUCKET_NAME=$(aws ssm get-parameter --name /openbrighton/main/web/source-bucket/name | jq -r '.Parameter.Value')
          BUILD_DIRECTORY=./dist

          # sync build to s3
          aws s3 sync $BUILD_DIRECTORY s3://$SOURCE_BUCKET_NAME --delete

          # invalidate cloudfront cache
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
